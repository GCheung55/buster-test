Buster Test 0.1.0 documentation
===============================
:Author: Christian Johansen
:Email: christian@cjohansen.no

Buster test is a library for creating, running and visualizing results of test
suites. The runner defines a data model for test suites (_test contexts_ in
Buster terminology) that can be created using various frontends. By default,
*buster-test* ships with an xUnit style <<testCase,+testCase+>> frontend as well
as a BDD-like <<spec,+spec+>> frontend.

The <<testRunner,test runner>> is evented and supports both synchronous and
asynchronous tests. The runner itself always executes asynchronously, making it
very good at visualizing ongoing progress and helps avoid "long running scripts"
warnings in browsers.

Buster test ships with a quite a few reporters for visualizing test runs in
browsers, on node.js and on continuous integration servers. By listening to the
test runner events, you can easily create custom reporters.

Table of contents
-----------------
* <<test-case,Test cases>>
* <<spec,Specs>>
* <<testRunner,Test runner>>
* <<reporters,Reporters>>
* <<runs,Running Buster tests>>
* <<contexts,Test context (data model)>>
* <<adapters,Adding support for other test frameworks>>
* <<license,License (BSD)>>

[[test-case]]
Test cases
----------

The +buster.testCase+ function is a powerful xUnit style frontend for creating
test cases runnable by the test runner.


[[spec]]
Specs
-----

[[test-runner]]
Test runner
-----------

The test runner can run <<contexts,test contexts>>, which are usually created
with either the <<test-case,+buster.testCase+>> or <<spec,+buster.spec+>>
function.

Test functions
~~~~~~~~~~~~~~

A test function is just a regular function defined on a context. Test functions
are executed asynchronously, but in sequence.

[[async-tests]]
Asynchronous tests
~~~~~~~~~~~~~~~~~~

The test runner supports asynchronous tests through promises. A test can be made
asynchronous by explicitly returning a promise - an object that has a +then+
method. You can also make tests asynchronous by explicitly accepting a single
argument - +done+. The argument is a function which can be called when the test
has completed. The method will resolve the promise created for you by the
runner.

[source,javascript]
"some test": function (done) {
    setTimeout(function () {
        done(); // Completes test
    }, 100);
}

In order to prevent test runs from freezing up, the test runner will abort tests
that run too long. You can control the timeout threshold by setting the runner's
+timeout+ property to the desired timeout in milliseconds. This property can
also be specified in the <<test-runner-create,+testRunner.create+>> method.

[[done-callback]]
The +done+ callback used in asynchronous tests can also take a function as its
only argument. This is useful when using an assertion framework that is based
solely on throwing exceptions - making sure the assertion errors are thrown
inside a function called by the test runner gives the test runner the ability to
pick them up.

The following example shows an asynchronous test using node.js's assertion
module:

[source,javascript]
----
var buster = require("buster");
var assert = require("assert");

buster.testCase("Async test with node.js assertions", {
    "should contact server": function (done) {
        myApi.request(function (data) {
            done(function () {
                assert.notEqual(data, null);
            });
        });
    }
});
----

[[test-failures]]
Test failures
~~~~~~~~~~~~~

Test failures are flagged to the test runner by way of +AssertionError+s. An
assertion error is simply an exception with the +name+ property set to
+AssertionError+. Normally, throwing exceptions is enough for the test runner to
pick it up.

In asynchronous tests, the picture is slightly more complicated.
<<done-callback,The +done+ callback>> can be used to allow the runner to catch
exceptions. Alternately, you can fail an assertion by passing an error to the
runner's +assertionFailure(error)+ method. This method will associate the error
with the currently running test. The default integration with +buster-assert+
uses +buster-assert+'s +error+ event and passes the error to the runner through
this method.

The +assertionFailure+ method is a test runner hook intended for authors of
"plugins" and adapters to other testing libraries. End users likely won't need
to call this method.

[[setup-teardown]]
Setup and teardown
~~~~~~~~~~~~~~~~~~

Test contexts can have setup and tear down methods. How you define them depends
on the front-end (i.e. <<testCase,+testCase+>>, <<spec,+spec+>> or something
else, like the JsTestDriver adapter).

When nesting contexts, setup methods are called from the top level first, then
each sub-context up to and including the context hosting the currently run
test. Tear down methods are called in the opposite direction: from the current
context and out.

[source,javascript]
----
buster.testCase("Setup and tear down ordering", {
    setUp: function () {
        buster.log("Top-level setUp");
    },

    tearDown: function () {
        buster.log("Top-level tearDown");
    },

    "outer test": function () {
        buster.log("Top-level test");
    },

    "nested context": {
        setUp: function () {
            buster.log("Nested context setUp");
        },

        "nested test": function () {
            buster.log("Nested test");
        },

        "deeply nested context": {
            setUp: function () {
                buster.log("Deeply nested context setUp");
            },

            tearDown: function () {
                buster.log("Deeply nested context tearDown");
            },

            "deeply nested test": function () {
                buster.log("Deeplyested test");
            }
        }
    }
});

// Prints:
Top-level setUp
Top-level test
Top-level tearDown
Top-level setUp
Nested context setUp
Nested test
Top-level tearDown
Top-level setUp
Nested context setUp
Deeply nested context setUp
Deeply nested test
Deeply nested tearDown
Top-level tearDown
----

[[async-setup-teardown]]
Asynchronous setup and teardown
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

<<async-tests,Just like tests>>, setup and tear down methods can be asynchronous
either by returning a +then+able promise object, or by explicitly accept a
function argument (which, when called, resolves the test).

Setup and tear down functions are run in order, so if a setup is asynchronous,
the next setup (or the test function) will not execute before it completes. 

[[nested-contexts]]
Nested contexts
~~~~~~~~~~~~~~~

Contexts can be arbitrarily nested. Nested contexts can contain setup and tear
down methods on their own, and will be executed as explained under
<<setup-teardown,Setup and tear down>>. Additionally, each context can contain
tests and other contexts.

Most test reporters concatenate the names of the contexts when displaying a test
name.

[[deferred-tests]]
Deferred tests
~~~~~~~~~~~~~~

A test can be deferred by "commenting it out". Deferring a test means it will
show up in your report to remind you to complete it - but it won't actually
run. This is useful for tests that are known to fail until some feature is
implemented. "Commenting out a test" means starting the test's name with two
forward slashes:

[source,javascript]
----
buster.testCase("Deferred test", {
    "//this test will not be run": function () {
        // ...
    }
});
----

Various front-ends may provide other syntax for deferring tests.

[[assertion-count]]
Assertion counter
~~~~~~~~~~~~~~~~~

The test runner knows nothing of assertions apart from the fact that an
+AssertionError+ is considered a test failure. If you want the runner to keep
track of the number of assertions run, you can override the runner's
+assertionCount+ method to return a number relevant to your assertion framework.

[[suite-start]]
Event: +"suite:start"+
~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (context) {}

The event is emitted once when +runSuite+ is called. Its callback receives no
data.

[[suite-end]]
Event: +"suite:end"+
~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (results) {}

The event is emitted once when +runSuite+ completes (i.e. all of its contexts
have been run). It receives an object as its only argument. The object contains
a high-level numeric report:

[source,javascript]
----
{
    contexts: 0,
    tests: 0,
    errors: 0,
    failures: 0,
    assertions: 0,
    timeouts: 0,
    deferred: 0
}
----

[[context-start]]
Event: +"context:start"+
~~~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (context) {}

Emitted every time a context is entered. The context object is passed as the
only argument.

[[context-end]]
Event: +"context:end"+
~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (context) {}

Emitted every time a context is completed. The context object is passed as the
only argument.

[[test-setup]]
Event: +"test:setUp"+
~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (test) {}

Called before the setup method(s) for a test is called. The test object passed
to the listeners is an object with three properties, +name+ (string), +func+
(the actual test function) and +context+, the containing context object.

[[test-async]]
Event: +"test:async"+
~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (test) {}

[[test-start]]
Event: +"test:start"+
~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (test) {}

[[suite-teardown]]
Event: +"test:tearDown"+
~~~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (test) {}

[[test-failure]]
Event: +"test:failure"+
~~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (test) {}

[[test-error]]
Event: +"test:error"+
~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (test) {}

[[test-success]]
Event: +"test:success"+
~~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (test) {}

[[test-timeout]]
Event: +"test:timeout"+
~~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (test) {}

[[test-deferred]]
Event: +"test:deferred"+
~~~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (test) {}

[[uncaughtexception]]
Event: +"uncaughtException"+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
function (error) {}

[[test-runner-create]]
+buster.testRunner.create([options])+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[source,javascript]
----
{
    timeout: 250,
    failOnNoAssertions: true,
    handleUncaughtExceptions: true
}
----

[[test-runner-oncreate]]
+buster.testRunner.onCreate(callback)+
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

[[test-runner-runsuite]]
+runner.runSuite(contexts)+
~~~~~~~~~~~~~~~~~~~~~~~~~~~

[[test-runner-run]]
+runner.run(context)+
~~~~~~~~~~~~~~~~~~~~~

[[test-runner-assertion-count]]
+runner.assertionCount()+
~~~~~~~~~~~~~~~~~~~~~~~~~

[[reporters]]
Reporters
---------

[[runs]]
Running Buster tests
--------------------

[[contexts]]
Test context (data model)
-------------------------

[[adapters]]
Adding support for other test frameworks
----------------------------------------


[[license]]
buster-test license
-------------------

include::../LICENSE[]
